import asyncio
import logging
import random
import re

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import MessageEntityType
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ChatMemberUpdated

from src.agent.client import Dify
from src.agent.news_client import Dify as NewsDify
from src.configuration import conf


async def start_bot():
    """ÂêØÂä® bot Âπ∂ÁõëÂê¨Ê∂àÊÅØ"""
    bot_clementine = Bot(token=conf.bot.token, default=DefaultBotProperties(parse_mode='MarkdownV2'))
    bot_maeve = Bot(token=conf.bot.maeve_token, default=DefaultBotProperties(parse_mode='MarkdownV2'))
    bot_teddy = Bot(token=conf.bot.teddy_token, default=DefaultBotProperties(parse_mode='MarkdownV2'))
    dp = Dispatcher()  # ÂàõÂª∫ DispatcherÔºàÊ∂àÊÅØÁÆ°ÁêÜÂô®Ôºâ
    dify: Dify = Dify(conf.dify.api_key, conf.dify.base_url)
    news_client: NewsDify = NewsDify(conf.news.api_key, conf.news.base_url)

    # Ê≥®ÂÜåÂëΩ‰ª§Â§ÑÁêÜÂô®
    @dp.message(Command("start"))
    async def start_handler(message: Message):
        await message.answer("‰Ω†Â•ΩÔºÅÊàëÊòØ‰Ω†ÁöÑ Bot ü§ñ")

    @dp.message(Command("help"))
    async def help_handler(message: Message):
        await message.answer("ÊîØÊåÅÁöÑÂëΩ‰ª§Ôºö\n/start - ÂêØÂä®Êú∫Âô®‰∫∫\n/help - Ëé∑ÂèñÂ∏ÆÂä©")

    @dp.message()
    async def echo_handler(message: Message, state: FSMContext):
        """ÁõëÂê¨ÊâÄÊúâÊñáÊú¨Ê∂àÊÅØÔºåÂπ∂ÂéüÊ†∑ËøîÂõû"""
        state_data: dict = await state.get_data()
        chat = message.chat
        user_id = message.from_user.id
        result = None

        mention_me = False
        if chat.type in ["group", "supergroup"]:
            chat_id = chat.id

            # Ê£ÄÊµãÊòØÂê¶Ë¢´@ÊèêÂèä
            if message.entities:
                for entity in message.entities:
                    if entity.type in [MessageEntityType.MENTION, MessageEntityType.TEXT_MENTION]:
                        mention_me = True
                        break

            if mention_me:
                result = f"{chat_id}-{user_id}"
            else:
                result = str(chat_id)

        elif chat.type == "private":
            result = str(user_id)
            mention_me = True
        conversation_id: str|None = None
        if result:
            conversation_id = state_data.get(result)
            user_id = result
        if message.text is None:
            return
        if mention_me:
            response = await dify.send_streaming_chat_message(
                message=message.text,
                user_id=user_id,
                conversation_id=conversation_id,
                user_name=message.from_user.username,
            )
            if conversation_id is None:
                if result and response.conversation_id:
                    await state.update_data({result: response.conversation_id})  # Â≠òÂÇ® UUID
            if response.need_response:
                await message.reply(escape_markdown_v2(response.message), parse_mode="MarkdownV2")

    @dp.chat_member()
    async def welcome_handler(event: ChatMemberUpdated):
        """ÂΩìÊúâÊñ∞ÊàêÂëòÂä†ÂÖ•Êó∂Ôºå@‰ªñÂπ∂ÂèëÈÄÅÊ¨¢ËøéÊ∂àÊÅØ"""
        if event.new_chat_member.status in ["member", "restricted"]:  # Âè™Ê¨¢ËøéÊñ∞ÊàêÂëò
            member_name = event.new_chat_member.user.username or event.new_chat_member.user.first_name or "New Member"
            new_member_name = f"@{member_name}"
            response = await dify.send_streaming_chat_message(
                message="new member join the group",
                user_id=event.from_user.id,
                conversation_id=None,
                new_member_name=new_member_name,
                user_name=member_name,
                telegram_chat_type="welcome",
            )
            if response.need_response:
                await event.answer(escape_markdown_v2(response.message), parse_mode="MarkdownV2")

    async def send_daily_random_messages():
        while True:
            if conf.bot.tg_group_id:
                response = await news_client.send_streaming_chat_message(
                    message="get today news.",
                    user_id=conf.bot.tg_group_id,
                    conversation_id=None,
                    new_member_name=None,
                    telegram_chat_type="ask_for_news",
                )
                for conversation in response.conversations:
                    # sleep conversation.delayTime seconds
                    await asyncio.sleep(conversation.delayTime * 10)
                    if conversation.user == "maeve":
                        # use telegram bot api to send message
                        await bot_maeve.send_message(text=escape_markdown_v2(conversation.content),chat_id=conf.bot.tg_group_id, parse_mode="MarkdownV2")
                    elif conversation.user == "teddy":
                        await bot_teddy.send_message(text=escape_markdown_v2(conversation.content),chat_id=conf.bot.tg_group_id, parse_mode="MarkdownV2")
                    elif conversation.user == "clementine":
                        await bot_clementine.send_message(text=escape_markdown_v2(conversation.content),chat_id=conf.bot.tg_group_id, parse_mode="MarkdownV2")
            await asyncio.sleep(random.randint(60 * 60 * 3, 60 * 60 * 5))  # Sleep for a random 5-6 hours

    asyncio.create_task(send_daily_random_messages())
    # ÂêØÂä® bot
    await dp.start_polling(bot_clementine)


def escape_markdown_v2(text: str) -> str:
    """
    ‰øùÁïô MarkdownV2 ÁªìÊûÑÔºàÈìæÊé•„ÄÅÁ≤ó‰ΩìÁ≠âÔºâÔºåËΩ¨‰πâÂÖ∂‰ªñÈÉ®ÂàÜÁöÑ‰øùÁïôÂ≠óÁ¨¶
    """
    # ÂåπÈÖç MarkdownV2 ÁöÑÊ†∏ÂøÉÁªìÊûÑÔºàÈùûË¥™Â©™ÂåπÈÖçÔºå‰ºòÂÖàÂ§ÑÁêÜÈìæÊé•Ôºâ
    pattern = re.compile(
        r'(\[.*?\]\(\S*?\))'      # ÈìæÊé• [text](url)ÔºåURL‰∏≠‰∏çÂÖÅËÆ∏Á©∫Ê†º
        r'|(\*\*.*?\*\*)'          # Á≤ó‰Ωì **text**
        r'|(\*.*?\*)'              # Êñú‰Ωì *text*
        r'|(__.*?__)'              # ‰∏ãÂàíÁ∫ø __text__
        r'|(_.*?_)'                # Êñú‰Ωì _text_
        r'|(`.*?`)'                # Ë°åÂÜÖ‰ª£Á†Å `text`
        r'|(```[\s\S]*?```)'       # Â§öË°å‰ª£Á†ÅÂùó
        r'|\\n'                    # Êç¢Ë°å
        , re.DOTALL)

    parts = []
    last_end = 0

    for match in pattern.finditer(text):
        start = match.start()
        end = match.end()

        # ËΩ¨‰πâÈùûÁªìÊûÑÂåñÁöÑÊôÆÈÄöÊñáÊú¨
        if start > last_end:
            plain_text = text[last_end:start]
            parts.append(_escape_plain_text(plain_text))
        group_text = match.group()
        if match := re.match(r'\[(.*?)\]\((\S*?)\)', group_text, re.DOTALL):
            link_text = match.group(1)
            link_url = match.group(2)
            parts.append(f'[{_escape_plain_text(link_text)}]({_escape_plain_text(link_url)})')
        elif match := re.match(r'\*\*(.*?)\*\*', group_text, re.DOTALL):
            txt = match.group(1)
            parts.append(f'**{_escape_plain_text(txt)}**')
        elif match := re.match(r'__(.*?)__', group_text, re.DOTALL):
            txt = match.group(1)
            parts.append(f'__{_escape_plain_text(txt)}__')
        elif match := re.match(r'_(.*?)_', group_text):
            txt = match.group(1)
            parts.append(f'_{_escape_plain_text(txt)}_')
        elif match := re.match(r'`(.*?)`', group_text):
            txt = match.group(1)
            parts.append(f'`{_escape_plain_text(txt)}`')
        elif match := re.match(r'```([\s\S]*?)```', group_text):
            txt = match.group(1)
            parts.append(f'```{_escape_plain_text(txt)}```')
        elif re.match(r'\\n', group_text):
            parts.append(f'\n')
        else:
            parts.append(group_text)
        last_end = end

    # Â§ÑÁêÜÂâ©‰ΩôÊñáÊú¨
    if last_end < len(text):
        plain_text = text[last_end:]
        parts.append(_escape_plain_text(plain_text))

    return ''.join(parts)


def _escape_plain_text(text: str) -> str:
    """ËΩ¨‰πâÊôÆÈÄöÊñáÊú¨‰∏≠ÁöÑ MarkdownV2 ‰øùÁïôÂ≠óÁ¨¶"""
    return re.sub(pattern=re.compile(r"([_*\[\]()~`>#+\-=|{}.!\\])"), repl=r'\\\1', string=text)


if __name__ == "__main__":
    logging.basicConfig(level=conf.logging_level)
    try:
        asyncio.run(start_bot())
    except KeyboardInterrupt:
        logging.info("Á®ãÂ∫èÂ∑≤ÊâãÂä®‰∏≠Êñ≠„ÄÇ")
